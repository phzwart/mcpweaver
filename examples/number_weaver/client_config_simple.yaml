# Simplified Client Configuration with Dynamic Schema Generation
# This shows how to configure the client without hardcoded JSON schemas

llm:
  model: "phi3:mini"
  provider: "ollama"
  api_url: "http://localhost:11434/api/generate"
  timeout: 30
  options:
    temperature: 0.1
    top_p: 0.9
  # No json_schema needed - it's generated dynamically from the server!

mcp_server:
  host: "localhost"
  port: 8080
  timeout: 10

# Serialization configuration for handling NumPy arrays
serialization:
  enabled: true
  default_behavior: "string"

# Behavior and Prompt Instructions
behavior:
  role: "Statistical Analysis Assistant"
  personality: "Analytical, precise, and helpful with numerical computations"
  
  instructions: |
    You are a statistical analysis assistant that helps users perform numerical computations.
    
    When users ask questions:
    1. Use the appropriate numpy tools based on the query
    2. Build logical sequences of tool calls
    3. Provide clear explanations of what you're doing and why
    4. Follow the configured workflow patterns
    
    Always explain your reasoning and what tools you're using.

# Tool Usage Guidelines with Keywords
tools:
  np_mean:
    description: "Calculate the arithmetic mean of array elements"
    keywords: ["mean", "average", "central tendency", "arithmetic mean"]
    when_to_use: "Use to calculate the average value of a dataset"
    
  np_std:
    description: "Compute the standard deviation along the specified axis"
    keywords: ["standard deviation", "std", "variability", "spread"]
    when_to_use: "Use to measure the spread or variability of data"
    
  np_quantile:
    description: "Compute the q-th quantile of the data along the specified axis"
    keywords: ["quantile", "percentile", "quartile", "median"]
    when_to_use: "Use to find specific percentiles or quartiles of data"
    
  np_median:
    description: "Compute the median along the specified axis"
    keywords: ["median", "middle value", "robust average"]
    when_to_use: "Use to find the middle value of a dataset"
    
  np_min:
    description: "Return the minimum of an array or minimum along an axis"
    keywords: ["minimum", "min", "lowest", "smallest"]
    when_to_use: "Use to find the smallest value in a dataset"
    
  np_max:
    description: "Return the maximum of an array or maximum along an axis"
    keywords: ["maximum", "max", "highest", "largest"]
    when_to_use: "Use to find the largest value in a dataset"
    
  np_sum:
    description: "Sum of array elements over a given axis"
    keywords: ["sum", "total", "addition", "summation"]
    when_to_use: "Use to calculate the total of all values"
    
  np_var:
    description: "Compute the variance along the specified axis"
    keywords: ["variance", "var", "spread", "variability"]
    when_to_use: "Use to measure the spread of data around the mean"
    
  np_random_normal:
    description: "Draw random samples from a normal (Gaussian) distribution"
    keywords: ["normal", "gaussian", "random", "generate", "simulate"]
    when_to_use: "Use to generate random numbers from a normal distribution"
    
  np_random_uniform:
    description: "Draw samples from a uniform distribution"
    keywords: ["uniform", "random", "generate", "simulate", "equal probability"]
    when_to_use: "Use to generate random numbers from a uniform distribution"

# Prompt Templates
prompts:
  system_prompt: |
    You are a statistical analysis assistant. You have access to numpy tools through an MCP server.
    
    Your job is to help users perform numerical computations and statistical analysis. Always:
    - Start by understanding what the user wants to compute
    - Use appropriate numpy tools to answer questions
    - Explain what you're doing and why
    - Provide clear, helpful responses with numerical results
    
  user_prompt_template: |
    User Query: {query}
    
    Available Tools:
    - np_mean: Calculate the arithmetic mean of array elements
    - np_std: Compute the standard deviation along the specified axis
    - np_quantile: Compute the q-th quantile of the data along the specified axis
    - np_median: Compute the median along the specified axis
    - np_min: Return the minimum of an array or minimum along an axis
    - np_max: Return the maximum of an array or maximum along an axis
    - np_sum: Sum of array elements over a given axis
    - np_var: Compute the variance along the specified axis
    - np_random_normal: Draw random samples from a normal (Gaussian) distribution
    - np_random_uniform: Draw samples from a uniform distribution
    
    Please use the appropriate tools to answer the user's query.

# Response Format Configuration
response_format:
  include_tool_calls: true
  explain_reasoning: true
  provide_summary: true
  suggest_next_steps: true

# Next Steps Suggestions
next_steps:
  - "Ask me to calculate other statistics (median, variance, etc.)"
  - "Request to generate random data for testing"
  - "Ask me to analyze the distribution of your data"
  - "Request to compare different datasets"

# LLM Reasoning Configuration
llm_reasoning:
  system_prompt_template: |
    You are an AI assistant that helps users with statistical analysis and numerical computations.

    Available tools:
    {tools}

    Your task is to:
    1. Understand what the user wants to compute
    2. Select the appropriate tool(s) to use
    3. Extract any required arguments from the user's query
    4. When chaining tools, use the output from previous tools as input to subsequent tools

    Respond with a JSON object containing:
    - "tools": Array of tool names to use (in order of execution)
    - "arguments": Object with arguments for each tool

    IMPORTANT: When you need to use the output from one tool as input to another tool:
    - For the first tool, provide the actual arguments
    - For subsequent tools that use the output from previous tools, use "USE_OUTPUT_FROM_[tool_name]" as the 'a' parameter
    - The system will automatically replace this placeholder with the actual output from the previous tool

  user_prompt_template: "User query: {query}"
  json_extraction_regex: r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}' 